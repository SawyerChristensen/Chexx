//
//  MessagesViewController.swift
//  HexChessLite
//
//  Created by Sawyer Christensen on 8/23/25.
//

import UIKit
import Messages
import SwiftUI

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        
        super.willBecomeActive(with: conversation)
               
       let menuView = MessagesMainMenuView { [weak self] in
           self?.startGame(conversation: conversation)
       }
       
       let hostingController = UIHostingController(rootView: menuView)
       
       // Remove old children
       children.forEach { $0.removeFromParent() }
       view.subviews.forEach { $0.removeFromSuperview() }
       
       // Add new
       addChild(hostingController)
       view.addSubview(hostingController.view)
       hostingController.view.translatesAutoresizingMaskIntoConstraints = false
       NSLayoutConstraint.activate([
           hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
           hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor),
           hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
           hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor)
       ])
       
       hostingController.didMove(toParent: self)
   }
   
   private func startGame(conversation: MSConversation) {
       let message = MSMessage(session: MSSession())
       let layout = MSMessageTemplateLayout()
    
       if let boardImage = UIImage(named: "iMessageGameInvite") {
           layout.image = boardImage
       }
       layout.caption = "Let's Play Hex Chess!"
       
       message.layout = layout
       
       conversation.insert(message) { error in
           if let error = error {
               print("Error inserting message: \(error.localizedDescription)")
           }
       }
   }
    
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        if let url = message.url, let components = URLComponents(url: url, resolvingAgainstBaseURL: false) {
            if let state = components.queryItems?.first(where: { $0.name == "state" })?.value {
                // Load the board from HexFen here
                print("Loaded game state: \(state)")
            }
        }
    }

    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
